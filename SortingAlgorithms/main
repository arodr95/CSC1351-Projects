package sortingalgorithms;

import java.util.Scanner;
import java.util.Random;
import java.time.Instant;
import java.time.Duration;

public class SortingAlgorithms {

    public static void main(String[] args) {
        
        System.out.println("Please enter the size of your file:");
        
        Scanner input = new Scanner(System.in);
        int listSize = input.nextInt();
        
        int[] array = new int[listSize];
        Random rand = new Random();
        
        for(int i= 0 ; i<listSize; i++)
            array[i] = rand.nextInt(1000);
        
        Instant start = Instant.now();
        BubbleSort(array.clone());
        Instant finish;
        finish = Instant.now();
        System.out.println("Bubble sort time is: "+ Duration.between(start, finish).toMillis());
        
        start = Instant.now();
        SCBubbleSort(array.clone());
        finish = Instant.now();
        System.out.println("Short circuit bubble sort time is: "+ Duration.between(start, finish).toMillis());
        
        Instant start = Instant.now();
        SelectionSort(array.clone());
        Instant finish = Instant.now();
        System.out.println("Selection sort time is: "+ Duration.between(start, finish).toMillis());
        
        start = Instant.now();
        InsertionSort(array.clone());
        finish = Instant.now();
        System.out.println("Insertion sort time is: "+ Duration.between(start, finish).toMillis());

        start = Instant.now();
        mergeSort(array.clone());
        finish = Instant.now();
        System.out.println("Merge sort time is: "+ Duration.between(start, finish).toMillis());
        
        start = Instant.now();
        quickSort(array.clone(), 0, array.length -1);
        finish = Instant.now();
        System.out.println("Quick sort time is: "+ Duration.between(start, finish).toMillis());
        
    }
    
    public static void BubbleSort(int[] array)
    {
        int i, j, temp;
        long counter = 0;
        
        for(i=0; i<array.length-1; i++)
        {
            for(j=0; j<array.length-i-1; j++)
            { 
                counter++;
                
                if (array[j]>array[j+1])
                {
                    temp = array[j];
                    array[j] = array [j+1];
                    array [j+1] = temp;
                }
            }
        }
        
        System.out.println("Bubble Sort Steps: " + counter);
            
    }
    
    public static void SCBubbleSort(int[] array)
    {
        int i, j, temp;
        long counter=0;
        
        
        for(i=0; i<array.length; i++)
        {
            boolean swap = false;
            for(j=0; j<array.length-i-1; j++)
            {
                counter++;
                
                if (array[j]>array[j+1])
                {
                    temp = array[j];
                    array[j] = array [j+1];
                    array [j+1] = temp;
                    swap = true;
                }
            }
            if (!swap)
                break;
        }
        
        System.out.println("Short Circuit Bubble Sort Steps: " + counter);
    }
    
    public static void SelectionSort(int[] array)
    {
        int i, j, temp;
        long counter=0;
        
        for (i=0; i<array.length; i++)
        {
            int minIndex=0;
            
            for (j=i+1; j<array.length; j++)
            {
                counter++;
                if (array[j]<array[i+1])
                {
                    minIndex = j;
                }    
            }
            
            temp = array[minIndex];
            array[minIndex] = array[i];
            array[i]= temp;           
        }
        
        System.out.println("Selection Sort Steps: " + counter);
    }
    
    public static void InsertionSort(int[] array)
    {
        int i, key, j=0;
        long counter =0;
        
        for(i=1; i<array.length; i++)
        {
            key = array[i];
            j=i-1;
            
           
            while(j>0 && array[j]>key)
            {
                counter++;
                array[j+1] = array[j];
                j=j-1;
            }
            array[j+1] = key;
        }
        
        System.out.println("Insertion Sort Steps: " + counter);

    }
    
    public static void mergeSort(int [] array)
    {
        if (array.length<2)
            return;
        
        int mid = array.length/2;
        
        int [] l= new int [mid];
        int [] r = new int [array.length - mid];
        
        int i,j;
        
        for (i = 0; i<mid; i++)
            l[i] = array [i];
        
        for (j = mid; j<array.length; j++)
            r[j-mid] = array [j];
        
        mergeSort(l);
        mergeSort(r);
        
        merge(array, l, r, mid, array.length-mid);
    }
    
    public static void merge(int[] array, int[] l, int[] r, int left, int right)
    {
        int i=0, j=0, k=0;
        
        while (i<left && j<right)
        {
            if(l[i]<=r[j])
            {
                array[k] = l[i];
                i++;
            }
            
            else
            {
                array[k] = r[j];
                j++;
            }
            
            k++;
        }
        
        while (i<left)
            array[k++] = l[i++];
        
        while (j<right)
            array[k++] = r[j++];
    }

    public static void quickSort(int [] array, int low, int high) 
	  {
      //check for empty or null array
      if (array == null || array.length == 0){
        return;
      }

      if (low >= high){
        return;
      }

      //Get the pivot element from the middle of the list
      int middle = low + (high - low) / 2;
      int pivot = array[middle];

      // make left < pivot and right > pivot
      int i = low, j = high;
      while (i <= j) 
      {
        //Check until all values on left side array are lower than pivot
        while (array[i] < pivot) 
        {
          i++;
        }
        //Check until all values on left side array are greater than pivot
        while (array[j] > pivot) 
        {
          j--;
        }
        //Now compare values from both side of lists to see if they need swapping 
        //After swapping move the iterator on both lists
        if (i <= j) 
        {
          swap (array, i, j);
          i++;
          j--;
			}
		}
		//Do same operation as above recursively to sort two sub arrays
		if (low < j){
			quickSort(array, low, j);
		}
		if (high > i){
			quickSort(array, i, high);
		}
	}
	
	public static void swap (int array[], int x, int y)
    {
		int temp = array[x];
		array[x] = array[y];
		array[y] = temp;
    }

}
